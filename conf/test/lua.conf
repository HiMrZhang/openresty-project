lua_shared_dict shared_data 1m;
lua_shared_dict locks 10m;
lua_shared_dict limit_counter 10m;
init_by_lua_file lua/init.lua;
server {
    listen       80;
    server_name  47.97.16.185;

    location /lua {
        default_type 'text/html';
        #lua_code_cache off;
        content_by_lua_file lua/test.lua;
    }
    location ~ /lua_request/(\d+)/(\d+) {
            #设置nginx变量
            set $a $1;
            set $b $host;
            default_type "text/html";
            #nginx内容处理
            content_by_lua_file lua/test_request.lua;
            #内容体处理完成后调用
            echo_after_body "ngx.var.b $b";
    }
    location /lua_response_1 {
        default_type "text/html";
        content_by_lua_file lua/test_response_1.lua;
    }
    location /lua_response_2 {
        default_type "text/html";
        content_by_lua_file lua/test_response_2.lua;
    }
    location /lua_other {
        default_type "text/html";
        content_by_lua_file lua/test_other.lua;
    }
    location /lua_shared_dict {
        default_type "text/html";
        content_by_lua_file lua/test_lua_shared_dict.lua;
    }
    location /lua_set_1 {
        default_type "text/html";
        set_by_lua_file $num lua/test_set_1.lua;
        echo $num;
    }
    location /lua_rewrite_1 {
        default_type "text/html";
        rewrite_by_lua_file lua/test_rewrite_1.lua;
        echo "no rewrite";
    }
    location /lua_rewrite_3 {
        default_type "text/html";
        rewrite_by_lua_file lua/test_rewrite_3.lua;
        echo "rewrite3 uri : $uri";
    }
    location /lua_module_1 {
        default_type 'text/html';
        lua_code_cache on;
        content_by_lua_file lua/test_module_1.lua;
    }
    location /lua_redis_basic {
        default_type 'text/html';
        lua_code_cache on;
        content_by_lua_file lua/test_redis_basic.lua;
    }
    location /lua_mysql {
       default_type 'text/html';
       lua_code_cache on;
       content_by_lua_file lua/test_mysql.lua;
    }
    location /lua_http_1 {
       default_type 'text/html';
       lua_code_cache on;
       content_by_lua_file lua/test_http_1.lua;
    }
    location ~ /lua_cjson {
       default_type 'text/html';
       lua_code_cache on;
       content_by_lua_file lua/test_cjson.lua;
    }
    location ~ /lua_dkjson {
       default_type 'text/html';
       lua_code_cache on;
       content_by_lua_file lua/test_dkjson.lua;
    }
    location ~ /lua_iconv {
       default_type 'text/html';
       charset gbk;
       lua_code_cache on;
       content_by_lua_file lua/test_iconv.lua;
    }
    location ~ /lua_lrucache {
       default_type 'text/html';
       lua_code_cache on;
       content_by_lua_file lua/test_lrucache.lua;
    }
    location ~ /lua_utf8 {
       default_type 'text/html';
       lua_code_cache on;
       charset utf-8;
       content_by_lua_file lua/test_utf8.lua;
    }

    location /lua_template_1 {
        default_type 'text/html';
        lua_code_cache on;
        content_by_lua_file lua/test_template_1.lua;
    }
    location /lua_template_2 {
        default_type 'text/html';
        lua_code_cache on;
        content_by_lua_file lua/test_template_2.lua;
    }
    location /lua_template_3 {
        default_type 'text/html';
        lua_code_cache on;
        charset utf-8;
        content_by_lua_file lua/test_template_3.lua;
    }
    location /test1 {
        keepalive_timeout 60s;
        keepalive_requests 1000;
        content_by_lua '
            ngx.say("test1 : ", ngx.req.get_uri_args()["a"])
            ngx.log(ngx.ERR, "request test1")
        ';
    }
    location /test2 {
        keepalive_timeout 60s;
        keepalive_requests 1000;
        content_by_lua '
            ngx.say("test2 : ", ngx.req.get_uri_args()["a"])
            ngx.log(ngx.ERR, "request test2")
        ';
    }
    location /test {
         lua_socket_connect_timeout 3s;
         lua_socket_send_timeout 3s;
         lua_socket_read_timeout 3s;
         lua_socket_pool_size 100;
         lua_socket_keepalive_timeout 60s;
         lua_socket_buffer_size 8k;

         content_by_lua '
             local res1, res2 = ngx.location.capture_multi{
                   { "/test1", { args = ngx.req.get_uri_args() } },
                   { "/test2", { args = ngx.req.get_uri_args()} },
             }
             if res1.status == ngx.HTTP_OK then
                 ngx.say(res1.body)
             end
             if res2.status ~= ngx.HTTP_OK then
                --记录错误
             end
         ';
    }
    location /api1 {
        echo_sleep 3;
        echo api1 : $arg_a;
    }
    location /api2 {
        echo_sleep 3;
        echo api2 : $arg_a;
    }
    location /serial {
        default_type 'text/html';
        content_by_lua '
            local t1 = ngx.now()
            local res1 = ngx.location.capture("/api1", {args = ngx.req.get_uri_args()})
            local res2 = ngx.location.capture("/api2", {args = ngx.req.get_uri_args()})
            local t2 = ngx.now()
            ngx.print(res1.body, "<br/>", res2.body, "<br/>", tostring(t2-t1))
        ';
    }
    location /concurrency1 {
        default_type 'text/html';
        content_by_lua '
            local t1 = ngx.now()
            local res1,res2 = ngx.location.capture_multi({
                  {"/api1", {args = ngx.req.get_uri_args()}},
                  {"/api2", {args = ngx.req.get_uri_args()}}

            })
            local t2 = ngx.now()
            ngx.print(res1.body, "<br/>", res2.body, "<br/>", tostring(t2-t1))
        ';
    }
    location /concurrency2 {
        default_type 'text/html';
        content_by_lua '
            local t1 = ngx.now()
            local function capture(uri, args)
               return ngx.location.capture(uri, args)
            end
            local thread1 = ngx.thread.spawn(capture, "/api1", {args = ngx.req.get_uri_args()})
            local thread2 = ngx.thread.spawn(capture, "/api2", {args = ngx.req.get_uri_args()})
            local ok1, res1 = ngx.thread.wait(thread1)
            local ok2, res2 = ngx.thread.wait(thread2)
            local t2 = ngx.now()
            ngx.print(res1.body, "<br/>", res2.body, "<br/>", tostring(t2-t1))
        ';
    }
    location /test_flow_control {
            default_type 'text/html';
            lua_code_cache on;
            charset utf-8;
            content_by_lua_file lua/test_flow_control.lua;
    }
}
